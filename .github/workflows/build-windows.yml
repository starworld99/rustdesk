name: Build RustDesk Windows

on:
  workflow_dispatch:

env:
  RENDEZVOUS_SERVER: xyz.bsp.cn
  RELAY_SERVER: xyz.bsp.cn:21117
  RS_PUB_KEY: B70FbvLRUyE1K4QSYizzi8jypvvfEERdVbBU61EE8Us=
  API_SERVER: https://xyz.bsp.cn/rustdesk-hbbs

jobs:
  build-windows:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出仓库，包括子模块
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2. 安装 Rust
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rust-src, rustfmt
          profile: minimal

      # 3. 安装交叉编译工具和依赖
      - name: Install cross compile tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config mingw-w64 autoconf automake libtool libssl-dev cmake
          echo "CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          echo "AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV

      # 4. 添加 Windows 编译目标
      - name: Add Windows target
        run: rustup target add x86_64-pc-windows-gnu

      # 5. 构建 Windows release 可执行文件
      - name: Build release
        run: cargo build --release --target x86_64-pc-windows-gnu

      # 6. 上传构建好的可执行文件
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows
          path: target/x86_64-pc-windows-gnu/release/
